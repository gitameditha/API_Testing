{
  "stats": {
    "suites": 1,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2019-10-31T17:47:48.304Z",
    "end": "2019-10-31T17:47:50.122Z",
    "duration": 1818,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "388646ca-fffc-40c9-9c5f-1b11f621eeb6",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "47d84fb6-1dc1-40db-beb3-04f3de4af0ef",
        "title": "OMDB Movie List",
        "fullFile": "D:\\project\\Interview\\QA_Automation\\API_Testing\\api\\test\\movie-list-test.js",
        "file": "\\api\\test\\movie-list-test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "@get As a User, I want to be able to get OMDB Movie list",
            "fullTitle": "OMDB Movie List @get As a User, I want to be able to get OMDB Movie list",
            "timedOut": false,
            "duration": 151,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieList(apiKey, keySearch);\nassert(response.status).to.equal(200);",
            "err": {},
            "isRoot": false,
            "uuid": "283d5e41-6262-4fcc-8a9c-98fdfeac6adc",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get As a User, I should got error message when I send request without key of search",
            "fullTitle": "OMDB Movie List @get As a User, I should got error message when I send request without key of search",
            "timedOut": false,
            "duration": 69,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieList(apiKey, '');\nassert(response.status).to.equal(200, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('Something went wrong.');",
            "err": {},
            "isRoot": false,
            "uuid": "9d894f75-eec3-48d9-a539-dea6cbb2d3ec",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get As a User, I should got error 401 when I send request with invalid API Key",
            "fullTitle": "OMDB Movie List @get As a User, I should got error 401 when I send request with invalid API Key",
            "timedOut": false,
            "duration": 729,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieList(invalidApiKey, keySearch);\nassert(response.status).to.equal(401, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('Invalid API key!');",
            "err": {},
            "isRoot": false,
            "uuid": "89b11853-7e11-4cc4-87b0-39a30e89cc2c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get As a User,search use all special character",
            "fullTitle": "OMDB Movie List @get As a User,search use all special character",
            "timedOut": false,
            "duration": 55,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieList(apiKey, specialChar);\nassert(response.status).to.equal(200, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('Too many results.');",
            "err": {},
            "isRoot": false,
            "uuid": "58cf0d9f-34e9-44c7-8223-4beb05f47d33",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get As a User,search use all special character",
            "fullTitle": "OMDB Movie List @get As a User,search use all special character",
            "timedOut": false,
            "duration": 60,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieList(apiKey, specialChar);\nassert(response.status).to.equal(200, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('Too many results.');",
            "err": {},
            "isRoot": false,
            "uuid": "3f9ee9b8-cd01-4fac-9f61-2597a9ceaf1d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get As a User,search using null api key",
            "fullTitle": "OMDB Movie List @get As a User,search using null api key",
            "timedOut": false,
            "duration": 600,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieList('', specialChar);\nassert(response.status).to.equal(401, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('No API key provided.');",
            "err": {},
            "isRoot": false,
            "uuid": "a68c34a3-ba31-4470-be24-fd1a5dd5f685",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get As a User,search using long string",
            "fullTitle": "OMDB Movie List @get As a User,search using long string",
            "timedOut": false,
            "duration": 66,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieList(apiKey, varlongString);\nassert(response.status).to.equal(200, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('Movie not found!');",
            "err": {},
            "isRoot": false,
            "uuid": "ec0b7d6f-f762-457f-9977-09c557bf9c9b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "@get search using parameter and parameter value",
            "fullTitle": "OMDB Movie List @get search using parameter and parameter value",
            "timedOut": false,
            "duration": 68,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const response = await page.getMovieList(apiKey, varTittle);\nassert(response.status).to.equal(200, response.body.Error);\nassert(response.body.Response).to.equal('False');\nassert(response.body.Error).to.equal('Movie not found!');",
            "err": {},
            "isRoot": false,
            "uuid": "1d499c92-acbb-4d78-b43a-f342fd764a9b",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "283d5e41-6262-4fcc-8a9c-98fdfeac6adc",
          "9d894f75-eec3-48d9-a539-dea6cbb2d3ec",
          "89b11853-7e11-4cc4-87b0-39a30e89cc2c",
          "58cf0d9f-34e9-44c7-8223-4beb05f47d33",
          "3f9ee9b8-cd01-4fac-9f61-2597a9ceaf1d",
          "a68c34a3-ba31-4470-be24-fd1a5dd5f685",
          "ec0b7d6f-f762-457f-9977-09c557bf9c9b",
          "1d499c92-acbb-4d78-b43a-f342fd764a9b"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1798,
        "root": false,
        "rootEmpty": false,
        "_timeout": 180000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 180000
  },
  "copyrightYear": 2019
}